webpackHotUpdate(5,{

/***/ 579:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(37);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(15);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(16);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(40);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(39);

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = __webpack_require__(540);

var _style2 = _interopRequireDefault(_style);

var _react = __webpack_require__(12);

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(84);

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRedux = __webpack_require__(541);

var _SearchInput = __webpack_require__(583);

var _SearchInput2 = _interopRequireDefault(_SearchInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/KINGSLAYER/Development/react-native-libraries/components/Navigation.js';


var renderNavigationItem = function renderNavigationItem(item) {
  return _react2.default.createElement('span', {
    className: 'navigation-item\n        ' + (item.active ? 'navigation-item-active' : undefined) + '\n        ' + (!item.active ? 'navigation-interactable' : undefined),
    onClick: item.onClick, 'data-jsx': 812904353,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 9
    }
  }, _react2.default.createElement(_style2.default, {
    styleId: 812904353,
    css: '.navigation-item[data-jsx="812904353"] { display:-webkit-inline-box; display:-ms-inline-flexbox; display:inline-flex;-webkit-box-align: column;-ms-flex-align: column;align-items: column;-moz-flex-direction: column;-webkit-box-orient: vertical;-webkit-box-direction: normal;-ms-flex-direction: column;flex-direction: column;margin-right: 36px;padding-bottom: 8px;box-shadow: 0 2px 0 black;}.navigation-interactable[data-jsx="812904353"] {cursor: pointer;opacity: 1;transition: 200ms opacity ease}.navigation-interactable[data-jsx="812904353"][data-jsx="812904353"]:hover { opacity:0.6;}.navigation-item-active[data-jsx="812904353"] {box-shadow: 0 2px 0 rgba(65, 160, 248, 1);}.navigation-active[data-jsx="812904353"] {color: rgba(65, 160, 248, 1);}.navigation-item-number[data-jsx="812904353"] {font-size:44px;font-size: 2.75rem;}.navigation-item-text[data-jsx="812904353"] {margin-top: 16px;font-size:12.8px;font-size: 0.8rem;}\n/*@ sourceURL=components/Navigation.js */\n/*# sourceMappingURL=data:application/json;base64, */'
  }), _react2.default.createElement('span', {
    className: 'navigation-item-number ' + (item.active ? 'navigation-active' : undefined), 'data-jsx': 812904353,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 50
    }
  }, item.top), _react2.default.createElement('span', { className: 'navigation-item-text', 'data-jsx': 812904353,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 54
    }
  }, item.bottom));
};

var Navigation = function (_React$PureComponent) {
  (0, _inherits3.default)(Navigation, _React$PureComponent);

  function Navigation() {
    (0, _classCallCheck3.default)(this, Navigation);

    return (0, _possibleConstructorReturn3.default)(this, (Navigation.__proto__ || (0, _getPrototypeOf2.default)(Navigation)).apply(this, arguments));
  }

  (0, _createClass3.default)(Navigation, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', { className: 'container', 'data-jsx': 245609823,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, _react2.default.createElement(_style2.default, {
        styleId: 245609823,
        css: '.container[data-jsx="245609823"] {margin: 32px 0 0 0;margin: 2rem 0 0 0;border-bottom: 1px solid #ECECEC}@media (max-width: 480px) {.container[data-jsx="245609823"] {margin: 1rem 0 0 0}}.navigation[data-jsx="245609823"] {width: 100%;max-width: 1319px;padding: 0 24px 0 24px;box-sizing: border-box;margin: 0 auto 0 auto; display:-webkit-box; display:-ms-flexbox; display:flex;-webkit-box-align: center;-ms-flex-align: center;align-items: center;-webkit-box-pack: justify;-ms-flex-pack: justify;justify-content: space-between}@media (max-width: 768px) {.navigation[data-jsx="245609823"] {padding: 0;-moz-flex-direction: column-reverse;-webkit-box-orient: vertical;-webkit-box-direction: reverse;-ms-flex-direction: column-reverse;flex-direction: column-reverse}}.navigation-left[data-jsx="245609823"] {-ms-flex-negative: 0;flex-shrink: 0}@media (max-width: 768px) {.navigation-left[data-jsx="245609823"] {padding: 24px 24px 0 24px;display: -webkit-box;display: -ms-flexbox;display: flex;-moz-flex-direction: row;-webkit-box-orient: horizontal;-webkit-box-direction: normal;-ms-flex-direction: row;flex-direction: row;width: 100%}}.navigation-right[data-jsx="245609823"] {min-width: 25%;width: 100%}@media (max-width: 768px) {.navigation-right[data-jsx="245609823"] {padding: 16px 24px 16px 24px;border-top: 1px solid #ECECEC;border-bottom: 1px solid #ECECEC}}\n/*@ sourceURL=components/Navigation.js */\n/*# sourceMappingURL=data:application/json;base64, */'
      }), _react2.default.createElement('nav', { className: 'navigation', 'data-jsx': 245609823,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 115
        }
      }, _react2.default.createElement('div', { className: 'navigation-left', 'data-jsx': 245609823,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 116
        }
      }, renderNavigationItem({
        top: this.props.all.length,
        bottom: 'All React Native',
        active: this.props.category === 'all',
        onClick: function onClick() {
          window.location.href = '/';
        }
      }), renderNavigationItem({
        top: this.props.expo.length,
        bottom: 'Compatible with Expo',
        active: this.props.category === 'expo',
        onClick: function onClick() {
          window.location.href = '/expo';
        }
      })), _react2.default.createElement('div', { className: 'navigation-right', 'data-jsx': 245609823,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 134
        }
      }, _react2.default.createElement(_SearchInput2.default, { placeholder: '\u201CType here to search...\u201D', __source: {
          fileName: _jsxFileName,
          lineNumber: 135
        }
      }))));
    }
  }]);

  return Navigation;
}(_react2.default.PureComponent);

Navigation.propTypes = {
  category: _propTypes2.default.string
};

exports.default = (0, _reactRedux.connect)(function (state) {
  return state;
})(Navigation);

 ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/Users/KINGSLAYER/Development/react-native-libraries/components/Navigation.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/Users/KINGSLAYER/Development/react-native-libraries/components/Navigation.js"); } } })();

/***/ })

})
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS41OTMwNjVkOWVkMGQzMDJkMGEyMC5ob3QtdXBkYXRlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uLmpzP2RmNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgU2VhcmNoSW5wdXQgZnJvbSAnLi4vY29tcG9uZW50cy9TZWFyY2hJbnB1dCc7XG5cbmNvbnN0IHJlbmRlck5hdmlnYXRpb25JdGVtID0gaXRlbSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNwYW5cbiAgICAgIGNsYXNzTmFtZT17YG5hdmlnYXRpb24taXRlbVxuICAgICAgICAke2l0ZW0uYWN0aXZlID8gJ25hdmlnYXRpb24taXRlbS1hY3RpdmUnIDogdW5kZWZpbmVkfVxuICAgICAgICAkeyFpdGVtLmFjdGl2ZSA/ICduYXZpZ2F0aW9uLWludGVyYWN0YWJsZScgOiB1bmRlZmluZWR9YH1cbiAgICAgIG9uQ2xpY2s9e2l0ZW0ub25DbGlja30+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLm5hdmlnYXRpb24taXRlbSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjb2x1bW47XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAzNnB4O1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDhweDtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDAgYmxhY2s7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLm5hdmlnYXRpb24taW50ZXJhY3RhYmxlIHtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAyMDBtcyBvcGFjaXR5IGVhc2U7XG4gICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgb3BhY2l0eTogMC42O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uYXZpZ2F0aW9uLWl0ZW0tYWN0aXZlIHtcbiAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDAgcmdiYSg2NSwgMTYwLCAyNDgsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uYXZpZ2F0aW9uLWFjdGl2ZSB7XG4gICAgICAgICAgICBjb2xvcjogcmdiYSg2NSwgMTYwLCAyNDgsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uYXZpZ2F0aW9uLWl0ZW0tbnVtYmVyIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMi43NXJlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubmF2aWdhdGlvbi1pdGVtLXRleHQge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMTZweDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44cmVtO1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPHNwYW5cbiAgICAgICAgY2xhc3NOYW1lPXtgbmF2aWdhdGlvbi1pdGVtLW51bWJlciAke2l0ZW0uYWN0aXZlID8gJ25hdmlnYXRpb24tYWN0aXZlJyA6IHVuZGVmaW5lZH1gfT5cbiAgICAgICAge2l0ZW0udG9wfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmF2aWdhdGlvbi1pdGVtLXRleHRcIj57aXRlbS5ib3R0b219PC9zcGFuPlxuICAgIDwvc3Bhbj5cbiAgKTtcbn07XG5cbmNsYXNzIE5hdmlnYXRpb24gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjYXRlZ29yeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAuY29udGFpbmVyIHtcbiAgICAgICAgICAgIG1hcmdpbjogMnJlbSAwIDAgMDtcbiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjRUNFQ0VDO1xuXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtIDAgMCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uYXZpZ2F0aW9uIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMzE5cHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAwIDI0cHggMCAyNHB4O1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvIDAgYXV0bztcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbi1yZXZlcnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC5uYXZpZ2F0aW9uLWxlZnQge1xuICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XG5cbiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICAgICAgICBwYWRkaW5nOiAyNHB4IDI0cHggMCAyNHB4O1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubmF2aWdhdGlvbi1yaWdodCB7XG4gICAgICAgICAgICBtaW4td2lkdGg6IDI1JTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgICAgcGFkZGluZzogMTZweCAyNHB4IDE2cHggMjRweDtcbiAgICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNFQ0VDRUM7XG4gICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjRUNFQ0VDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgICA8bmF2IGNsYXNzTmFtZT1cIm5hdmlnYXRpb25cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmlnYXRpb24tbGVmdFwiPlxuICAgICAgICAgICAge3JlbmRlck5hdmlnYXRpb25JdGVtKHtcbiAgICAgICAgICAgICAgdG9wOiB0aGlzLnByb3BzLmFsbC5sZW5ndGgsXG4gICAgICAgICAgICAgIGJvdHRvbTogJ0FsbCBSZWFjdCBOYXRpdmUnLFxuICAgICAgICAgICAgICBhY3RpdmU6IHRoaXMucHJvcHMuY2F0ZWdvcnkgPT09ICdhbGwnLFxuICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLyc7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHtyZW5kZXJOYXZpZ2F0aW9uSXRlbSh7XG4gICAgICAgICAgICAgIHRvcDogdGhpcy5wcm9wcy5leHBvLmxlbmd0aCxcbiAgICAgICAgICAgICAgYm90dG9tOiAnQ29tcGF0aWJsZSB3aXRoIEV4cG8nLFxuICAgICAgICAgICAgICBhY3RpdmU6IHRoaXMucHJvcHMuY2F0ZWdvcnkgPT09ICdleHBvJyxcbiAgICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9leHBvJztcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2aWdhdGlvbi1yaWdodFwiPlxuICAgICAgICAgICAgPFNlYXJjaElucHV0IHBsYWNlaG9sZGVyPXtg4oCcVHlwZSBoZXJlIHRvIHNlYXJjaC4uLuKAnWB9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvbmF2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KHN0YXRlID0+IHN0YXRlKShOYXZpZ2F0aW9uKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvTmF2aWdhdGlvbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBQ0E7QUFFQTtBQUVBO0FBRUE7O0FBSkE7QUFBQTtBQUFBO0FBQ0E7QUFEQTtBQXlDQTtBQXpDQTtBQTBDQTs7QUFEQTtBQUVBO0FBRkE7QUFDQTs7QUFHQTtBQUFBO0FBQUE7QUFHQTtBQWxEQTtBQUNBO0FBbURBOzs7Ozs7Ozs7OztBQU1BO0FBQ0E7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWlEQTtBQWpEQTs7QUFpREE7QUFDQTtBQURBO0FBQ0E7O0FBQUE7QUFDQTtBQURBOztBQUVBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQVBBO0FBUUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUlBO0FBUkE7O0FBUUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUtBO0FBTEE7Ozs7OztBQTVFQTtBQUNBO0FBREE7QUFFQTtBQUFBO0FBQ0E7QUFpRkE7QUFBQTtBQUFBO0FBQ0E7Ozs7O0EiLCJzb3VyY2VSb290IjoiIn0=