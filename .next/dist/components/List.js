'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = require('styled-jsx/style.js');

var _style2 = _interopRequireDefault(_style);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TopicItem = require('../components/TopicItem');

var _TopicItem2 = _interopRequireDefault(_TopicItem);

var _Link = require('../components/Link');

var _Link2 = _interopRequireDefault(_Link);

var _datetime = require('../common/datetime');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/KINGSLAYER/Development/react-native-libraries/components/List.js';


var renderItem = function renderItem(item) {
  return _react2.default.createElement('li', {
    className: 'list-item ' + (item.isCategoryHeader ? 'list-item-mobile' : undefined),
    key: 'list-item-' + item.name, 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11
    }
  }, _react2.default.createElement(_style2.default, {
    styleId: 3283985168,
    css: '.list-item[data-jsx="3283985168"] { display:-webkit-box; display:-ms-flexbox; display:flex;padding: 27px 0 27px 0;border-bottom: 1px solid #ECECEC}.list-item[data-jsx="3283985168"][data-jsx="3283985168"]:last-child { border-bottom:0}@media (max-width: 600px) {.list-item[data-jsx="3283985168"] { display:-webkit-box; display:-ms-flexbox; display:flex; -moz-flex-direction:column; -webkit-box-orient:vertical; -webkit-box-direction:normal; -ms-flex-direction:column; flex-direction:column}}.list-item-mobile[data-jsx="3283985168"] {}@media (max-width: 600px) {.list-item-mobile[data-jsx="3283985168"] { display:none}}.list-item-heading[data-jsx="3283985168"] {color: #24292E;font-weight: 400;font-family: \'office-code-medium\', monospace;}.list-item-heading-weightless[data-jsx="3283985168"] {font-weight: 400;}.list-item-paragraph[data-jsx="3283985168"] {color: #24292E;margin-top: 4px;}.list-item-faded[data-jsx="3283985168"] {color: #ACACAC;}.list-item-column[data-jsx="3283985168"] {-ms-flex-preferred-size: 30%;flex-basis: 30%;padding-right: 24px;word-wrap:break-word;word-break: break-word}@media (max-width: 600px) {.list-item-column[data-jsx="3283985168"] { -ms-flex-preferred-size:100%; flex-basis:100%; padding-right:0px; margin-bottom:16px}}.list-item-column-wide[data-jsx="3283985168"] {-ms-flex-preferred-size: 40%;flex-basis: 40%;padding-right: 24px;word-wrap:break-word;word-break: break-word}@media (max-width: 600px) {.list-item-column-wide[data-jsx="3283985168"] { -ms-flex-preferred-size:100%; flex-basis:100%; padding-right:0px; margin-bottom:16px}}\n/*@ sourceURL=components/List.js */\n/*# sourceMappingURL=data:application/json;base64, */'
  }), _react2.default.createElement('span', { className: 'list-item-column', 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 81
    }
  }, _react2.default.createElement('h2', {
    className: 'list-item-heading ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 82
    }
  }, item.column1.top), _react2.default.createElement('p', {
    className: 'list-item-paragraph ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 86
    }
  }, item.column1.bottom)), _react2.default.createElement('span', { className: 'list-item-column-wide', 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91
    }
  }, _react2.default.createElement('h2', {
    className: 'list-item-heading-weightless ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 92
    }
  }, item.column2.top), _react2.default.createElement('p', {
    className: 'list-item-paragraph ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96
    }
  }, item.column2.bottom)), _react2.default.createElement('span', { className: 'list-item-column', 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101
    }
  }, _react2.default.createElement('h2', {
    className: 'list-item-heading-weightless ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 102
    }
  }, item.column3.top), _react2.default.createElement('p', {
    className: 'list-item-paragraph ' + (item.isCategoryHeader ? 'list-item-faded' : undefined), 'data-jsx': 3283985168,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 106
    }
  }, item.column3.bottom)));
};

var List = function (_React$PureComponent) {
  (0, _inherits3.default)(List, _React$PureComponent);

  function List() {
    (0, _classCallCheck3.default)(this, List);

    return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
  }

  (0, _createClass3.default)(List, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var heading = renderItem({
        isCategoryHeader: true,
        column1: {
          top: '<Name>',
          bottom: '<Homepage URL>'
        },
        column2: {
          top: '<Description>',
          bottom: '<Topics[]>'
        },
        column3: {
          top: '<Last update>',
          bottom: '<Our score> — <Stars>'
        }
      });

      var elements = void 0;
      if (this.props.data.length < 1) {
        elements = _react2.default.createElement('div', { className: 'item-emptystate', 'data-jsx': 480358710,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 141
          }
        }, _react2.default.createElement(_style2.default, {
          styleId: 480358710,
          css: '.item-emptystate[data-jsx="480358710"] {text-align: center;width: 100%;padding: 0 24px 0 24px;margin-top: 64px;margin-bottom: 64px;}.item-emptystate-img[data-jsx="480358710"] {display: block;margin: 48px auto 24px auto;}\n/*@ sourceURL=components/List.js */\n/*# sourceMappingURL=data:application/json;base64, */'
        }), _react2.default.createElement('img', {
          className: 'item-emptystate-img',
          src: '/static/notfound.png',
          width: '64px',
          height: '64px',
          'data-jsx': 480358710,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 156
          }
        }), _react2.default.createElement('p', {
          'data-jsx': 480358710,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 162
          }
        }, 'Can\'t find anything! Try another search. ', _react2.default.createElement('br', {
          'data-jsx': 480358710,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 163
          }
        }), 'Want to contribute a library you like?', _react2.default.createElement('br', {
          'data-jsx': 480358710,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 164
          }
        }), 'Share it on', ' ', _react2.default.createElement(_Link2.default, { isStyled: true, href: 'https://slack.expo.io/', __source: {
            fileName: _jsxFileName,
            lineNumber: 167
          }
        }, 'Expo Slack'), '.'));
      } else {
        elements = this.props.data.map(function (item) {
          return renderItem({
            name: item.name,
            column1: {
              top: _react2.default.createElement(_Link2.default, { isDarkStyled: true, href: item.urls.repo, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 176
                }
              }, item.name),
              bottom: item.urls.homepage ? _react2.default.createElement(_Link2.default, { isStyled: true, href: item.urls.homepage, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 178
                }
              }, 'homepage') : undefined
            },
            column2: {
              top: item.description,
              bottom: item.topics.map(function (each) {
                return _react2.default.createElement(_TopicItem2.default, {
                  key: 'list-' + item.name + '-' + each,
                  count: _this2.props.topics[each], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 184
                  }
                }, each);
              })
            },
            column3: {
              top: (0, _datetime.getTimeSinceToday)(item.stats.pushedAt),
              bottom: item.score + '/100 \u2014 ' + item.stats.stars + ' stars'
            }
          });
        });
      }

      return _react2.default.createElement('ul', { className: 'List', 'data-jsx': 678965221,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 200
        }
      }, _react2.default.createElement(_style2.default, {
        styleId: 678965221,
        css: '.list[data-jsx="678965221"] {width: 100%;height: 72px;}\n/*@ sourceURL=components/List.js */\n/*# sourceMappingURL=data:application/json;base64, */'
      }), heading, elements);
    }
  }]);

  return List;
}(_react2.default.PureComponent);

List.propTypes = {
  data: _propTypes2.default.array,
  topics: _propTypes2.default.object
};
exports.default = List;